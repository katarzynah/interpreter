module SkelInterpreter where

-- Haskell module generated by the BNF converter

import AbsInterpreter
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog programheader declarations compoundstatement -> failure x
transProgramHeader :: ProgramHeader -> Result
transProgramHeader x = case x of
  ProgHead ident -> failure x
transDeclarations :: Declarations -> Result
transDeclarations x = case x of
  Dec variabledeclarations proceduredeclarations -> failure x
transVariableDeclarations :: VariableDeclarations -> Result
transVariableDeclarations x = case x of
  VarDecEmpty -> failure x
  VarDecFull variabledeclarationlist -> failure x
transVariableDeclarationList :: VariableDeclarationList -> Result
transVariableDeclarationList x = case x of
  VarDecListEnd vardec -> failure x
  VarDecList vardec variabledeclarationlist -> failure x
transVarDec :: VarDec -> Result
transVarDec x = case x of
  VarDecLabel idlist typespecifier -> failure x
transProcedureDeclarations :: ProcedureDeclarations -> Result
transProcedureDeclarations x = case x of
  ProcDecEmpty -> failure x
  ProcDecLabel procdec proceduredeclarations -> failure x
transProcDec :: ProcDec -> Result
transProcDec x = case x of
  ProcDecProc procheader declarations compoundstatement -> failure x
  ProcDecFun funcheader declarations compoundstatement -> failure x
transProcHeader :: ProcHeader -> Result
transProcHeader x = case x of
  ProcHead ident arguments -> failure x
transFuncHeader :: FuncHeader -> Result
transFuncHeader x = case x of
  FunHead ident arguments typespecifier -> failure x
transArguments :: Arguments -> Result
transArguments x = case x of
  Args argumentlist -> failure x
transArgumentList :: ArgumentList -> Result
transArgumentList x = case x of
  ArgListEmpty -> failure x
  ArgList arg argumentlist -> failure x
transArg :: Arg -> Result
transArg x = case x of
  ArgLabel idlist typespecifier -> failure x
transCompoundStatement :: CompoundStatement -> Result
transCompoundStatement x = case x of
  CompStmnt statementlist -> failure x
transStatementList :: StatementList -> Result
transStatementList x = case x of
  StmntListEmpty -> failure x
  StmntList statement statementlist -> failure x
transStatement :: Statement -> Result
transStatement x = case x of
  SEmpty -> failure x
  SComp compoundstatement -> failure x
  SAss assignmentstatement -> failure x
  SProc procedurecall -> failure x
  SFor forstatement -> failure x
  SWhile whilestatement -> failure x
  SIf ifstatement -> failure x
  SPrint printstatement -> failure x
transAssignmentStatement :: AssignmentStatement -> Result
transAssignmentStatement x = case x of
  AssStmnt ident expression -> failure x
  AssStmntArr ident expressionlist expression -> failure x
transProcedureCall :: ProcedureCall -> Result
transProcedureCall x = case x of
  ProcCall ident actuals -> failure x
transForStatement :: ForStatement -> Result
transForStatement x = case x of
  ForStmnt ident expression1 expression2 statement -> failure x
transWhileStatement :: WhileStatement -> Result
transWhileStatement x = case x of
  WhileStmnt expression statement -> failure x
transIfStatement :: IfStatement -> Result
transIfStatement x = case x of
  IfStmnt expression statement -> failure x
  IfStmntWithElse expression statement1 statement2 -> failure x
transPrintStatement :: PrintStatement -> Result
transPrintStatement x = case x of
  PrintStmnt expression -> failure x
transExpression :: Expression -> Result
transExpression x = case x of
  ExpSimple simpleexpression -> failure x
  ExpEqual simpleexpression1 simpleexpression2 -> failure x
  ExpNotEqual simpleexpression1 simpleexpression2 -> failure x
  ExpLess simpleexpression1 simpleexpression2 -> failure x
  ExpLessOrEqual simpleexpression1 simpleexpression2 -> failure x
  ExpGreater simpleexpression1 simpleexpression2 -> failure x
  ExpGreaterOrEqual simpleexpression1 simpleexpression2 -> failure x
transSimpleExpression :: SimpleExpression -> Result
transSimpleExpression x = case x of
  SimpleExpTerm term -> failure x
  SimpleExpAdd simpleexpression term -> failure x
  SimpleExpSubst simpleexpression term -> failure x
transTerm :: Term -> Result
transTerm x = case x of
  TermFactor factor -> failure x
  TermMultiply term factor -> failure x
  TermDivide term factor -> failure x
transFactor :: Factor -> Result
transFactor x = case x of
  FactorExpression expression -> failure x
  FactorPlus factor -> failure x
  FactorMinus factor -> failure x
  FactorFunctionCall functioncall -> failure x
  FactorConstant constant -> failure x
  FactorIdent ident -> failure x
  FactorArray ident expressionlist -> failure x
  FactorStoI expression -> failure x
  FactorItoS expression -> failure x
transFunctionCall :: FunctionCall -> Result
transFunctionCall x = case x of
  FunsCall ident actuals -> failure x
transActuals :: Actuals -> Result
transActuals x = case x of
  Act expressionlist -> failure x
transExpressionList :: ExpressionList -> Result
transExpressionList x = case x of
  ExpListEmpty -> failure x
  ExpListOne expression -> failure x
  ExpList expression expressionlist -> failure x
transIdList :: IdList -> Result
transIdList x = case x of
  IdLEnd ident -> failure x
  IdL ident idlist -> failure x
transTypeSpecifier :: TypeSpecifier -> Result
transTypeSpecifier x = case x of
  TypeSpecInt -> failure x
  TypeSpecBool -> failure x
  TypeSpecString -> failure x
  TypeSpecArray dimensionlist typespecifier -> failure x
transDimensionList :: DimensionList -> Result
transDimensionList x = case x of
  DimListEnd integer -> failure x
  DimList integer dimensionlist -> failure x
transConstant :: Constant -> Result
transConstant x = case x of
  ConstInt integer -> failure x
  ConstBool boolean -> failure x
  ConstString string -> failure x
transBoolean :: Boolean -> Result
transBoolean x = case x of
  BoolTrue -> failure x
  BoolFalse -> failure x

