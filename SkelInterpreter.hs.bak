module SkelInterpreter where

-- Haskell module generated by the BNF converter

import AbsInterpreter
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog programheader declarations compoundstatement -> failure x
transProgramHeader :: ProgramHeader -> Result
transProgramHeader x = case x of
  ProgHead ident -> failure x
transDeclarations :: Declarations -> Result
transDeclarations x = case x of
  Dec variabledeclarations proceduredeclarations -> failure x
transVariableDeclarations :: VariableDeclarations -> Result
transVariableDeclarations x = case x of
  VarDecEmpty -> failure x
  VarDec variabledeclarationlist -> failure x
transVariableDeclarationList :: VariableDeclarationList -> Result
transVariableDeclarationList x = case x of
  VarDecListEnd vardec -> failure x
  VarDecList vardec variabledeclarationlist -> failure x
transVarDec :: VarDec -> Result
transVarDec x = case x of
  VarDecLabel idlist typespecifier -> failure x
transProcedureDeclarations :: ProcedureDeclarations -> Result
transProcedureDeclarations x = case x of
  ProcedureDeclarationsEmptyLabel -> failure x
  ProcedureDeclarationsLabel procdec proceduredeclarations -> failure x
transProcDec :: ProcDec -> Result
transProcDec x = case x of
  ProcDecProcedureLabel procheader variabledeclarations compoundstatement -> failure x
  ProcDecFunctionLabel funcheader variabledeclarations compoundstatement -> failure x
transProcHeader :: ProcHeader -> Result
transProcHeader x = case x of
  ProcHeaderLabel ident arguments -> failure x
transFuncHeader :: FuncHeader -> Result
transFuncHeader x = case x of
  FuncHeaderLabel ident arguments typespecifier -> failure x
transArguments :: Arguments -> Result
transArguments x = case x of
  ArgumentsLabel argumentlist -> failure x
transArgumentList :: ArgumentList -> Result
transArgumentList x = case x of
  ArgumentListEmptyLabel -> failure x
  ArgumentListLabel arg argumentlist -> failure x
transArg :: Arg -> Result
transArg x = case x of
  ArgLabel idlist typespecifier -> failure x
transCompoundStatement :: CompoundStatement -> Result
transCompoundStatement x = case x of
  CompoundStatementLabel statementlist -> failure x
transStatementList :: StatementList -> Result
transStatementList x = case x of
  StatementListEmptyLabel -> failure x
  StatementListLabel statement statementlist -> failure x
transStatement :: Statement -> Result
transStatement x = case x of
  StatementEmptyLabel -> failure x
  StatementCompoundLabel compoundstatement -> failure x
  StatementAssigmentLabel assignmentstatement -> failure x
  StatementProcedureLabel procedurecall -> failure x
  StatementForLabel forstatement -> failure x
  StatementWhileLabel whilestatement -> failure x
  StatementIfLabel ifstatement -> failure x
  StatementPrintLabel printstatement -> failure x
transAssignmentStatement :: AssignmentStatement -> Result
transAssignmentStatement x = case x of
  AssignmentStatementLabel ident expression -> failure x
transProcedureCall :: ProcedureCall -> Result
transProcedureCall x = case x of
  ProcedureCallLabel ident actuals -> failure x
transForStatement :: ForStatement -> Result
transForStatement x = case x of
  ForStatementLabel ident expression1 expression2 statement -> failure x
transWhileStatement :: WhileStatement -> Result
transWhileStatement x = case x of
  WhileStatementLabel expression statement -> failure x
transIfStatement :: IfStatement -> Result
transIfStatement x = case x of
  IfStatementLabel expression statement -> failure x
  IfStatementWithElseLabel expression statement1 statement2 -> failure x
transPrintStatement :: PrintStatement -> Result
transPrintStatement x = case x of
  PrintStatementLabel expression -> failure x
transExpression :: Expression -> Result
transExpression x = case x of
  ExpressionSimple simpleexpression -> failure x
  ExpressionEqual simpleexpression1 simpleexpression2 -> failure x
  ExpressionNotEqual simpleexpression1 simpleexpression2 -> failure x
  ExpressionLess simpleexpression1 simpleexpression2 -> failure x
  ExpressionLessOrEqual simpleexpression1 simpleexpression2 -> failure x
  ExpressionGreater simpleexpression1 simpleexpression2 -> failure x
  ExpressionGreaterOrEqual simpleexpression1 simpleexpression2 -> failure x
transSimpleExpression :: SimpleExpression -> Result
transSimpleExpression x = case x of
  SimpleExpressionTerm term -> failure x
  SimpleExpressionAdd simpleexpression term -> failure x
  SimpleExpressionSubstract simpleexpression term -> failure x
transTerm :: Term -> Result
transTerm x = case x of
  TermFactor factor -> failure x
  TermMultiply term factor -> failure x
  TermDivide term factor -> failure x
transFactor :: Factor -> Result
transFactor x = case x of
  FactorExpression expression -> failure x
  FactorPlus factor -> failure x
  FactorMinus factor -> failure x
  FactorFunctionCall functioncall -> failure x
  FactorConstant constant -> failure x
  FactorIdent ident -> failure x
  FactorStoI expression -> failure x
  FactorItoS expression -> failure x
transFunctionCall :: FunctionCall -> Result
transFunctionCall x = case x of
  FuncionCallLabel ident actuals -> failure x
transActuals :: Actuals -> Result
transActuals x = case x of
  ActualsLabel expressionlist -> failure x
transExpressionList :: ExpressionList -> Result
transExpressionList x = case x of
  ExpressionListEmpty -> failure x
  ExpressionListLabel expression expressionlist -> failure x
transIdList :: IdList -> Result
transIdList x = case x of
  IdListSizeOne ident -> failure x
  IdListBigger ident idlist -> failure x
transTypeSpecifier :: TypeSpecifier -> Result
transTypeSpecifier x = case x of
  TypeSpecifierList -> failure x
  TypeSpecifierBool -> failure x
  TypeSpecifierString -> failure x
  TypeSpecfierArray dimensionlist typespecifier -> failure x
transDimensionList :: DimensionList -> Result
transDimensionList x = case x of
  DimensionListSizeOne dimension -> failure x
  DimensionListBigger dimension dimensionlist -> failure x
transDimension :: Dimension -> Result
transDimension x = case x of
  DimensionId ident -> failure x
  DimensionConstant constant -> failure x
transConstant :: Constant -> Result
transConstant x = case x of
  ConstantInteger integer -> failure x
  ConstantBoolean boolean -> failure x
  ConstantString string -> failure x
transBoolean :: Boolean -> Result
transBoolean x = case x of
  BoolTrue -> failure x
  BoolFalse -> failure x

