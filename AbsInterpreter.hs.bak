

module AbsInterpreter where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = Prog ProgramHeader Declarations CompoundStatement
  deriving (Eq, Ord, Show, Read)

data ProgramHeader = ProgHead Ident
  deriving (Eq, Ord, Show, Read)

data Declarations = Dec VariableDeclarations ProcedureDeclarations
  deriving (Eq, Ord, Show, Read)

data VariableDeclarations
    = VarDecEmpty | VarDec VariableDeclarationList
  deriving (Eq, Ord, Show, Read)

data VariableDeclarationList
    = VarDecListEnd VarDec | VarDecList VarDec VariableDeclarationList
  deriving (Eq, Ord, Show, Read)

data VarDec = VarDecLabel IdList TypeSpecifier
  deriving (Eq, Ord, Show, Read)

data ProcedureDeclarations
    = ProcedureDeclarationsEmptyLabel
    | ProcedureDeclarationsLabel ProcDec ProcedureDeclarations
  deriving (Eq, Ord, Show, Read)

data ProcDec
    = ProcDecProcedureLabel ProcHeader VariableDeclarations CompoundStatement
    | ProcDecFunctionLabel FuncHeader VariableDeclarations CompoundStatement
  deriving (Eq, Ord, Show, Read)

data ProcHeader = ProcHeaderLabel Ident Arguments
  deriving (Eq, Ord, Show, Read)

data FuncHeader = FuncHeaderLabel Ident Arguments TypeSpecifier
  deriving (Eq, Ord, Show, Read)

data Arguments = ArgumentsLabel ArgumentList
  deriving (Eq, Ord, Show, Read)

data ArgumentList
    = ArgumentListEmptyLabel | ArgumentListLabel Arg ArgumentList
  deriving (Eq, Ord, Show, Read)

data Arg = ArgLabel IdList TypeSpecifier
  deriving (Eq, Ord, Show, Read)

data CompoundStatement = CompoundStatementLabel StatementList
  deriving (Eq, Ord, Show, Read)

data StatementList
    = StatementListEmptyLabel
    | StatementListLabel Statement StatementList
  deriving (Eq, Ord, Show, Read)

data Statement
    = StatementEmptyLabel
    | StatementCompoundLabel CompoundStatement
    | StatementAssigmentLabel AssignmentStatement
    | StatementProcedureLabel ProcedureCall
    | StatementForLabel ForStatement
    | StatementWhileLabel WhileStatement
    | StatementIfLabel IfStatement
    | StatementPrintLabel PrintStatement
  deriving (Eq, Ord, Show, Read)

data AssignmentStatement
    = AssignmentStatementLabel Ident Expression
  deriving (Eq, Ord, Show, Read)

data ProcedureCall = ProcedureCallLabel Ident Actuals
  deriving (Eq, Ord, Show, Read)

data ForStatement
    = ForStatementLabel Ident Expression Expression Statement
  deriving (Eq, Ord, Show, Read)

data WhileStatement = WhileStatementLabel Expression Statement
  deriving (Eq, Ord, Show, Read)

data IfStatement
    = IfStatementLabel Expression Statement
    | IfStatementWithElseLabel Expression Statement Statement
  deriving (Eq, Ord, Show, Read)

data PrintStatement = PrintStatementLabel Expression
  deriving (Eq, Ord, Show, Read)

data Expression
    = ExpressionSimple SimpleExpression
    | ExpressionEqual SimpleExpression SimpleExpression
    | ExpressionNotEqual SimpleExpression SimpleExpression
    | ExpressionLess SimpleExpression SimpleExpression
    | ExpressionLessOrEqual SimpleExpression SimpleExpression
    | ExpressionGreater SimpleExpression SimpleExpression
    | ExpressionGreaterOrEqual SimpleExpression SimpleExpression
  deriving (Eq, Ord, Show, Read)

data SimpleExpression
    = SimpleExpressionTerm Term
    | SimpleExpressionAdd SimpleExpression Term
    | SimpleExpressionSubstract SimpleExpression Term
  deriving (Eq, Ord, Show, Read)

data Term
    = TermFactor Factor
    | TermMultiply Term Factor
    | TermDivide Term Factor
  deriving (Eq, Ord, Show, Read)

data Factor
    = FactorExpression Expression
    | FactorPlus Factor
    | FactorMinus Factor
    | FactorFunctionCall FunctionCall
    | FactorConstant Constant
    | FactorIdent Ident
    | FactorStoI Expression
    | FactorItoS Expression
  deriving (Eq, Ord, Show, Read)

data FunctionCall = FuncionCallLabel Ident Actuals
  deriving (Eq, Ord, Show, Read)

data Actuals = ActualsLabel ExpressionList
  deriving (Eq, Ord, Show, Read)

data ExpressionList
    = ExpressionListEmpty
    | ExpressionListLabel Expression ExpressionList
  deriving (Eq, Ord, Show, Read)

data IdList = IdListSizeOne Ident | IdListBigger Ident IdList
  deriving (Eq, Ord, Show, Read)

data TypeSpecifier
    = TypeSpecifierList
    | TypeSpecifierBool
    | TypeSpecifierString
    | TypeSpecfierArray DimensionList TypeSpecifier
  deriving (Eq, Ord, Show, Read)

data DimensionList
    = DimensionListSizeOne Dimension
    | DimensionListBigger Dimension DimensionList
  deriving (Eq, Ord, Show, Read)

data Dimension = DimensionId Ident | DimensionConstant Constant
  deriving (Eq, Ord, Show, Read)

data Constant
    = ConstantInteger Integer
    | ConstantBoolean Boolean
    | ConstantString String
  deriving (Eq, Ord, Show, Read)

data Boolean = BoolTrue | BoolFalse
  deriving (Eq, Ord, Show, Read)

