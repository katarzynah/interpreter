-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParInterpreter where
import AbsInterpreter
import LexInterpreter
import ErrM

}

%name pProgram Program
%name pProgramHeader ProgramHeader
%name pDeclarations Declarations
%name pVariableDeclarations VariableDeclarations
%name pVariableDeclarationList VariableDeclarationList
%name pVarDec VarDec
%name pProcedureDeclarations ProcedureDeclarations
%name pProcDec ProcDec
%name pProcHeader ProcHeader
%name pFuncHeader FuncHeader
%name pArguments Arguments
%name pArgumentList ArgumentList
%name pArg Arg
%name pCompoundStatement CompoundStatement
%name pStatementList StatementList
%name pStatement Statement
%name pAssignmentStatement AssignmentStatement
%name pProcedureCall ProcedureCall
%name pForStatement ForStatement
%name pWhileStatement WhileStatement
%name pIfStatement IfStatement
%name pPrintStatement PrintStatement
%name pExpression Expression
%name pSimpleExpression SimpleExpression
%name pTerm Term
%name pFactor Factor
%name pFunctionCall FunctionCall
%name pActuals Actuals
%name pExpressionList ExpressionList
%name pIdList IdList
%name pTypeSpecifier TypeSpecifier
%name pDimensionList DimensionList
%name pDimension Dimension
%name pConstant Constant
%name pBoolean Boolean
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '*' { PT _ (TS _ 3) }
  '+' { PT _ (TS _ 4) }
  ',' { PT _ (TS _ 5) }
  '-' { PT _ (TS _ 6) }
  '.' { PT _ (TS _ 7) }
  '/' { PT _ (TS _ 8) }
  ':' { PT _ (TS _ 9) }
  ':=' { PT _ (TS _ 10) }
  ';' { PT _ (TS _ 11) }
  '<' { PT _ (TS _ 12) }
  '<=' { PT _ (TS _ 13) }
  '<>' { PT _ (TS _ 14) }
  '=' { PT _ (TS _ 15) }
  '>' { PT _ (TS _ 16) }
  '>=' { PT _ (TS _ 17) }
  'False' { PT _ (TS _ 18) }
  'True' { PT _ (TS _ 19) }
  '[' { PT _ (TS _ 20) }
  ']' { PT _ (TS _ 21) }
  'array' { PT _ (TS _ 22) }
  'begin' { PT _ (TS _ 23) }
  'bool' { PT _ (TS _ 24) }
  'do' { PT _ (TS _ 25) }
  'else' { PT _ (TS _ 26) }
  'end' { PT _ (TS _ 27) }
  'endif' { PT _ (TS _ 28) }
  'for' { PT _ (TS _ 29) }
  'function' { PT _ (TS _ 30) }
  'if' { PT _ (TS _ 31) }
  'int' { PT _ (TS _ 32) }
  'int_to_string' { PT _ (TS _ 33) }
  'of' { PT _ (TS _ 34) }
  'print' { PT _ (TS _ 35) }
  'procedure' { PT _ (TS _ 36) }
  'program' { PT _ (TS _ 37) }
  'string' { PT _ (TS _ 38) }
  'string_to_int' { PT _ (TS _ 39) }
  'then' { PT _ (TS _ 40) }
  'to' { PT _ (TS _ 41) }
  'var' { PT _ (TS _ 42) }
  'while' { PT _ (TS _ 43) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }
L_quoted { PT _ (TL $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
String  :: { String }  : L_quoted {  $1 }

Program :: { Program }
Program : ProgramHeader Declarations CompoundStatement '.' { AbsInterpreter.Prog $1 $2 $3 }
ProgramHeader :: { ProgramHeader }
ProgramHeader : 'program' Ident ';' { AbsInterpreter.ProgHead $2 }
Declarations :: { Declarations }
Declarations : VariableDeclarations ProcedureDeclarations { AbsInterpreter.Dec $1 $2 }
VariableDeclarations :: { VariableDeclarations }
VariableDeclarations : {- empty -} { AbsInterpreter.VarDecEmpty }
                     | 'var' VariableDeclarationList { AbsInterpreter.VarDec $2 }
VariableDeclarationList :: { VariableDeclarationList }
VariableDeclarationList : VarDec { AbsInterpreter.VarDecListEnd $1 }
                        | VarDec VariableDeclarationList { AbsInterpreter.VarDecList $1 $2 }
VarDec :: { VarDec }
VarDec : IdList ':' TypeSpecifier ';' { AbsInterpreter.VarDecLabel $1 $3 }
ProcedureDeclarations :: { ProcedureDeclarations }
ProcedureDeclarations : {- empty -} { AbsInterpreter.ProcedureDeclarationsEmptyLabel }
                      | ProcDec ProcedureDeclarations { AbsInterpreter.ProcedureDeclarationsLabel $1 $2 }
ProcDec :: { ProcDec }
ProcDec : ProcHeader VariableDeclarations CompoundStatement ';' { AbsInterpreter.ProcDecProcedureLabel $1 $2 $3 }
        | FuncHeader VariableDeclarations CompoundStatement ';' { AbsInterpreter.ProcDecFunctionLabel $1 $2 $3 }
ProcHeader :: { ProcHeader }
ProcHeader : 'procedure' Ident Arguments ';' { AbsInterpreter.ProcHeaderLabel $2 $3 }
FuncHeader :: { FuncHeader }
FuncHeader : 'function' Ident Arguments ':' TypeSpecifier ';' { AbsInterpreter.FuncHeaderLabel $2 $3 $5 }
Arguments :: { Arguments }
Arguments : '(' ArgumentList ')' { AbsInterpreter.ArgumentsLabel $2 }
ArgumentList :: { ArgumentList }
ArgumentList : {- empty -} { AbsInterpreter.ArgumentListEmptyLabel }
             | Arg ';' ArgumentList { AbsInterpreter.ArgumentListLabel $1 $3 }
Arg :: { Arg }
Arg : IdList ':' TypeSpecifier { AbsInterpreter.ArgLabel $1 $3 }
CompoundStatement :: { CompoundStatement }
CompoundStatement : 'begin' StatementList 'end' { AbsInterpreter.CompoundStatementLabel $2 }
StatementList :: { StatementList }
StatementList : {- empty -} { AbsInterpreter.StatementListEmptyLabel }
              | Statement ';' StatementList { AbsInterpreter.StatementListLabel $1 $3 }
Statement :: { Statement }
Statement : {- empty -} { AbsInterpreter.StatementEmptyLabel }
          | CompoundStatement { AbsInterpreter.StatementCompoundLabel $1 }
          | AssignmentStatement { AbsInterpreter.StatementAssigmentLabel $1 }
          | ProcedureCall { AbsInterpreter.StatementProcedureLabel $1 }
          | ForStatement { AbsInterpreter.StatementForLabel $1 }
          | WhileStatement { AbsInterpreter.StatementWhileLabel $1 }
          | IfStatement { AbsInterpreter.StatementIfLabel $1 }
          | PrintStatement { AbsInterpreter.StatementPrintLabel $1 }
AssignmentStatement :: { AssignmentStatement }
AssignmentStatement : Ident ':=' Expression { AbsInterpreter.AssignmentStatementLabel $1 $3 }
ProcedureCall :: { ProcedureCall }
ProcedureCall : Ident Actuals { AbsInterpreter.ProcedureCallLabel $1 $2 }
ForStatement :: { ForStatement }
ForStatement : 'for' Ident ':=' Expression 'to' Expression 'do' Statement { AbsInterpreter.ForStatementLabel $2 $4 $6 $8 }
WhileStatement :: { WhileStatement }
WhileStatement : 'while' Expression 'do' Statement { AbsInterpreter.WhileStatementLabel $2 $4 }
IfStatement :: { IfStatement }
IfStatement : 'if' Expression 'then' Statement 'endif' { AbsInterpreter.IfStatementLabel $2 $4 }
            | 'if' Expression 'then' Statement 'else' Statement 'endif' { AbsInterpreter.IfStatementWithElseLabel $2 $4 $6 }
PrintStatement :: { PrintStatement }
PrintStatement : 'print' Expression { AbsInterpreter.PrintStatementLabel $2 }
Expression :: { Expression }
Expression : SimpleExpression { AbsInterpreter.ExpressionSimple $1 }
           | SimpleExpression '=' SimpleExpression { AbsInterpreter.ExpressionEqual $1 $3 }
           | SimpleExpression '<>' SimpleExpression { AbsInterpreter.ExpressionNotEqual $1 $3 }
           | SimpleExpression '<' SimpleExpression { AbsInterpreter.ExpressionLess $1 $3 }
           | SimpleExpression '<=' SimpleExpression { AbsInterpreter.ExpressionLessOrEqual $1 $3 }
           | SimpleExpression '>' SimpleExpression { AbsInterpreter.ExpressionGreater $1 $3 }
           | SimpleExpression '>=' SimpleExpression { AbsInterpreter.ExpressionGreaterOrEqual $1 $3 }
SimpleExpression :: { SimpleExpression }
SimpleExpression : Term { AbsInterpreter.SimpleExpressionTerm $1 }
                 | SimpleExpression '+' Term { AbsInterpreter.SimpleExpressionAdd $1 $3 }
                 | SimpleExpression '-' Term { AbsInterpreter.SimpleExpressionSubstract $1 $3 }
Term :: { Term }
Term : Factor { AbsInterpreter.TermFactor $1 }
     | Term '*' Factor { AbsInterpreter.TermMultiply $1 $3 }
     | Term '/' Factor { AbsInterpreter.TermDivide $1 $3 }
Factor :: { Factor }
Factor : '(' Expression ')' { AbsInterpreter.FactorExpression $2 }
       | '+' Factor { AbsInterpreter.FactorPlus $2 }
       | '-' Factor { AbsInterpreter.FactorMinus $2 }
       | FunctionCall { AbsInterpreter.FactorFunctionCall $1 }
       | Constant { AbsInterpreter.FactorConstant $1 }
       | Ident { AbsInterpreter.FactorIdent $1 }
       | 'string_to_int' '(' Expression ')' { AbsInterpreter.FactorStoI $3 }
       | 'int_to_string' '(' Expression ')' { AbsInterpreter.FactorItoS $3 }
FunctionCall :: { FunctionCall }
FunctionCall : Ident Actuals { AbsInterpreter.FuncionCallLabel $1 $2 }
Actuals :: { Actuals }
Actuals : '(' ExpressionList ')' { AbsInterpreter.ActualsLabel $2 }
ExpressionList :: { ExpressionList }
ExpressionList : {- empty -} { AbsInterpreter.ExpressionListEmpty }
               | Expression ',' ExpressionList { AbsInterpreter.ExpressionListLabel $1 $3 }
IdList :: { IdList }
IdList : Ident { AbsInterpreter.IdListSizeOne $1 }
       | Ident ',' IdList { AbsInterpreter.IdListBigger $1 $3 }
TypeSpecifier :: { TypeSpecifier }
TypeSpecifier : 'int' { AbsInterpreter.TypeSpecifierList }
              | 'bool' { AbsInterpreter.TypeSpecifierBool }
              | 'string' { AbsInterpreter.TypeSpecifierString }
              | 'array' '[' DimensionList ']' 'of' TypeSpecifier { AbsInterpreter.TypeSpecfierArray $3 $6 }
DimensionList :: { DimensionList }
DimensionList : Dimension { AbsInterpreter.DimensionListSizeOne $1 }
              | Dimension ',' DimensionList { AbsInterpreter.DimensionListBigger $1 $3 }
Dimension :: { Dimension }
Dimension : Ident { AbsInterpreter.DimensionId $1 }
          | Constant { AbsInterpreter.DimensionConstant $1 }
Constant :: { Constant }
Constant : Integer { AbsInterpreter.ConstantInteger $1 }
         | Boolean { AbsInterpreter.ConstantBoolean $1 }
         | String { AbsInterpreter.ConstantString $1 }
Boolean :: { Boolean }
Boolean : 'True' { AbsInterpreter.BoolTrue }
        | 'False' { AbsInterpreter.BoolFalse }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

